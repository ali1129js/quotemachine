{"version":3,"sources":["components/QuoteMachine.js","components/App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","props","react_default","a","createElement","react","className","newQuote","quoteText","quoteAuthor","onClick","getRandQuote","tweetQoute","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","text","state","window","open","encodeURIComponent","color","bind","assertThisInitialized","_this2","axios","get","then","res","console","log","data","undefined","setState","Math","floor","random","toString","style","position","background","transition","minHeight","minWidth","margin","components_QuoteMachine","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAuCeA,SA/BM,SAAAC,GAAK,OACxBC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aACZJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAAb,IAAmCL,EAAMM,SAASC,UAAlD,MAEFN,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAb,IAAsBL,EAAMM,SAASE,aACrCP,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SACdJ,EAAAC,EAAAC,cAAA,UACEE,UAAU,6BACVI,QAAST,EAAMU,cAFjB,uBAOAT,EAAAC,EAAAC,cAAA,UACEE,UAAU,iCACVI,QAAST,EAAMW,YAFjB,2BCsEGC,cAnFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAwCFL,WAAa,WACX,IAAMS,EAAOP,EAAKQ,MAAMf,SAASC,UAC3BC,EAAcK,EAAKQ,MAAMf,SAASE,YAExCc,OAAOC,KACL,yCACEC,mBAAmBJ,GACnB,IACAI,mBAAmBhB,GACrB,GACA,uFAjDFK,EAAKQ,MAAQ,CACXf,SAAU,CACRC,UAAW,KACXC,YAAa,KACbiB,MAAO,UAGXZ,EAAKH,aAAeG,EAAKH,aAAagB,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKF,WAAaE,EAAKF,WAAWe,KAAhBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAVNA,mFAaZG,KAAKN,sDAEQ,IAAAkB,EAAAZ,KACba,IACGC,IACC,+GAEDC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,WACWC,IAAvBJ,EAAIG,KAAK5B,UACXqB,EAAKS,SAAS,CACZ/B,SAAU,CACRC,UAAW,wCACXC,YAAa,KACbiB,MAAO,IAAMa,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OAI/Db,EAAKS,SAAS,CACZ/B,SAAU,CACRC,UAAWyB,EAAIG,KAAK5B,UACpBC,YAAawB,EAAIG,KAAK3B,YACtBiB,MAAO,IAAMa,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,0CAoBrE,OACExC,EAAAC,EAAAC,cAAA,OACEE,UAAU,MACVqC,MAAO,CACLC,SAAU,QACVC,WAAY5B,KAAKK,MAAMf,SAASmB,MAChCoB,WAAY,kBACZC,UAAW,OACXC,SAAU,SAGZ9C,EAAAC,EAAAC,cAAA,OACEE,UAAU,SACVqC,MAAO,CACLM,OAAQ,SAGV/C,EAAAC,EAAAC,cAAC8C,EAAD,CACE3C,SAAUU,KAAKK,MAAMf,SACrBI,aAAcM,KAAKN,aACnBC,WAAYK,KAAKL,sBA5EXuC,aCAEC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.c7d05c27.chunk.js","sourcesContent":["/**\n * @Author: Ali\n * @Date:   2018-12-24T12:03:11+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-17T16:24:19+01:00\n */\nimport React, { Fragment } from \"react\";\n\nconst QuoteMachine = props => (\n  <Fragment>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"jumbotron jumbotron-fluid\">\n            <h5 className=\"display-5\">\n              <i className=\"fas fa-quote-left\"> {props.newQuote.quoteText} </i>\n            </h5>\n            <p className=\"lead\"> {props.newQuote.quoteAuthor}</p>\n            <hr className=\"my-4\" />\n            <button\n              className=\"btn btn-primary btn-lg m-3\"\n              onClick={props.getRandQuote}\n            >\n              Show a random quote\n            </button>\n\n            <button\n              className=\"btn btn-outline-primary btn-lg\"\n              onClick={props.tweetQoute}\n            >\n              Tweet this Quote\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Fragment>\n);\n\nexport default QuoteMachine;\n","/**\n * @Author: Ali\n * @Date:   2018-12-23T11:19:57+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-03T17:02:54+01:00\n */\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport QuoteMachine from \"./QuoteMachine\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newQuote: {\n        quoteText: null,\n        quoteAuthor: null,\n        color: \"white\"\n      }\n    };\n    this.getRandQuote = this.getRandQuote.bind(this);\n    this.tweetQoute = this.tweetQoute.bind(this);\n  }\n  componentDidMount() {\n    this.getRandQuote();\n  }\n  getRandQuote() {\n    axios\n      .get(\n        \"https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\"\n      )\n      .then(res => {\n        console.log(res.data);\n        if (res.data.quoteText === undefined) {\n          this.setState({\n            newQuote: {\n              quoteText: \"Corrupted format , click again please\",\n              quoteAuthor: null,\n              color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n            }\n          });\n        } else {\n          this.setState({\n            newQuote: {\n              quoteText: res.data.quoteText,\n              quoteAuthor: res.data.quoteAuthor,\n              color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n            }\n          });\n        }\n      });\n  }\n  tweetQoute = () => {\n    const text = this.state.newQuote.quoteText;\n    const quoteAuthor = this.state.newQuote.quoteAuthor;\n\n    window.open(\n      \"https://twitter.com/intent/tweet?text=\" +\n        encodeURIComponent(text) +\n        \" \" +\n        encodeURIComponent(quoteAuthor),\n      \"\",\n      \"left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0\"\n    );\n  };\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          position: \"fixed\",\n          background: this.state.newQuote.color,\n          transition: \"all .7s ease-in\",\n          minHeight: \"100%\",\n          minWidth: \"100%\"\n        }}\n      >\n        <div\n          className=\"quotes\"\n          style={{\n            margin: \"30px\"\n          }}\n        >\n          <QuoteMachine\n            newQuote={this.state.newQuote}\n            getRandQuote={this.getRandQuote}\n            tweetQoute={this.tweetQoute}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @Author: Ali\n * @Date:   2018-12-23T11:20:14+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-17T16:48:50+01:00\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}